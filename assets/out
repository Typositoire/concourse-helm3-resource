#!/bin/bash

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source /opt/resource/common.sh

# Read inputs
source=$1
payload=$(mktemp helm-resource-request.XXXXXX)
cat > $payload <&0

# Prepare
setup_resource $payload $source
setup_repos $payload $source 
echo "Resource setup successful."

private_registry=$(jq -r '.params|has("private_registry")' < $payload)
namespace=$(jq -r '.source.namespace // "default"' < $payload)
release=$(jq -r '.source.release // ""' < $payload)
chart=$(jq -r '.params.chart // ""' < $payload)
version=$(jq -r '.params.version // ""' < $payload)
namespace_overwrite=$(jq -r '.params.namespace // ""' < $payload)
create_namespace=$(jq -r '.params.create_namespace // "false"' < $payload)
atomic=$(jq -r '.params.atomic // "false"' < $payload)
release_overwrite=$(jq -r '.params.release // ""' < $payload)
values=$(jq -r '.params.values // "" | if type == "array" then .[] else . end' < $payload)
debug=$(jq -r '.params.debug // "false"' < $payload)
replace=$(jq -r '.params.replace // "false"' < $payload)
uninstall=$(jq -r '.params.uninstall // "false"' < $payload)
delete_namespace=$(jq -r '.params.delete_namespace // "false"' < $payload)
test=$(jq -r '.params.test // "false"' < $payload)
test_logs=$(jq -r '.params.test_logs // "false"' < $payload)
devel=$(jq -r '.params.devel // "false"' < $payload)
force=$(jq -r '.params.force // "false"' < $payload)
show_diff=$(jq -r '.params.show_diff // "false"' < $payload)
post_renderer=$(jq -r '.params.post_renderer // ""' < $payload)
reuse_values=$(jq -r '.params.reuse_values // "false"' < $payload)
reset_values=$(jq -r '.params.reset_values // "false"' < $payload)
wait=$(jq -r '.params.wait // 0' < $payload)
check_is_ready=$(jq -r '.params.check_is_ready // "false"' < $payload)
wait_for_jobs=$(jq -r '.params.wait_for_jobs // "false"' < $payload)
timeout=$(jq -r '.params.timeout // "5m0s"' < $payload)
skip_missing_values=$(jq -r '.params.skip_missing_values // "false"' < $payload)

if [[ "$test" == "false" ]] && [[ "$uninstall" == "false" ]] && [ -z "$chart" ] ; then
  echo "invalid payload (missing chart)"
  exit 1
fi

if [[ "$test" == "true" ]] && [[ "$uninstall" == "true" ]] ; then
  echo "invalid payload ( test and uninstall cannot both be true )"
  exit 1
fi

if [[ "$test" == "true" ]] && [[ "$replace" == "true" ]] ; then
  echo "invalid payload ( test and replace cannot both be true )"
  exit 1
fi

if [[ "$uninstall" == "true" ]] && [[ "$replace" == "true" ]] ; then
  echo "invalid payload ( uninstall and replace cannot both be true )"
  exit 1
fi

if [ -f "$source/$namespace_overwrite" ]; then
  namespace=$(cat $source/$namespace_overwrite)
elif [ -n "$namespace_overwrite" ]; then
  namespace=$namespace_overwrite
fi

if [ -f "$source/$release_overwrite" ]; then
  release=$(cat $source/$release_overwrite)
elif [ -n "$release_overwrite" ]; then
  release=$release_overwrite
fi

if [[ "$chart" == *.tgz ]] || [[ -d "$source/$chart" ]]; then
  # it's a file/directory
  chart_full="$source/$chart"
  version=""
else
  # get from a repo
  chart_full="$chart"
fi

helm_registry_login() {
  ecr=$(jq -r '.params.private_registry|has("ecr")' < $payload)
  if [ "${ecr}" = true ]; then
    region=$(jq -r '.params.private_registry.ecr.region // ""' < $payload)
    account_id=$(jq -r '.params.private_registry.ecr.account_id // ""' < $payload)
    # only relevant to non-role based auth
    # no default value in order to support instance profile
    profile=$(jq -r '.params.private_registry.ecr.profile // ""' < $payload)
    profile_opt=""
    if [ -n "$profile" ]; then
      profile_opt="--profile ${profile}"
    fi

    echo "authenticating with ECR. region=${region} account_id=${account_id}"
    if [ -z "$region" ] || [ -z "$account_id" ]; then
      echo "invalid payload for AWS ECR, please pass all required params"
      exit 1
    fi

    use_role_base_auth=$(jq -r '.params.private_registry.ecr|has("role")' < $payload)
    use_user_base_auth=$(jq -r '.params.private_registry.ecr|has("user")' < $payload)

    if [ "${use_role_base_auth}" = true ]; then
      echo "use role to authenticate with ECR."
      role_arn=$(jq -r '.params.private_registry.ecr.role.arn // ""' < $payload)
      role_session_name=$(jq -r '.params.private_registry.ecr.role.session_name // ""' < $payload)
      echo "role_arn=${role_arn} role_session_name=${role_session_name}"

      if [ -z "${role_arn}" ]; then
        echo "invalid role arn for AWS EKS"
        exit 1
      fi

      $(printf "env AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
      $(aws sts assume-role \
      --role-arn ${role_arn} \
      --role-session-name ${role_session_name:-ECRAssumeRoleSession} \
      --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
      --output text)) aws ecr get-login-password --region ${region} | helm registry login --username AWS --password-stdin ${account_id}.dkr.ecr.${region}.amazonaws.com
      # assumed role credentail will **NOT** be persisted on the disk
    elif [ "${use_user_base_auth}" = true ]; then
      echo "use user credentials to authenticate with ECR."

      access_key_id=$(jq -r '.params.private_registry.ecr.user.access_key_id // ""' < $payload)
      secret_access_key=$(jq -r '.params.private_registry.ecr.user.secret_access_key // ""' < $payload)

      if [ -z "$access_key_id" ] || [ -z "$secret_access_key" ]; then
        echo "invalid user auth payload for AWS EKS, please pass all required params"
        exit 1
      fi

      # user credentail will be persisted on the disk under a specific profile
      mkdir -p ~/.aws
      echo "[${profile:-default}]
      aws_access_key_id=${access_key_id}
      aws_secret_access_key=${secret_access_key}
      region=${region}" > ~/.aws/credentials

      aws ecr get-login-password --region ${region} ${profile_opt} | helm registry login --username AWS --password-stdin ${account_id}.dkr.ecr.${region}.amazonaws.com
    else
      # defaults to use instance identity.
      echo "no role or user specified. Fallback to use identity of the instance e.g. instance profile) to authenticate with ECR"
      aws ecr get-login-password --region ${region} ${profile_opt} | helm registry login --username AWS --password-stdin ${account_id}.dkr.ecr.${region}.amazonaws.com
    fi
    echo "done logging in to ECR"
  else
    # implement support for other helm registry following a similar pattern
    echo "unsupported private reigistry configuration"
    exit 1
  fi
}

set_overridden_values() {
  while read -r -d '' key && read -r -d '' value && read -r -d '' path && read -r -d '' hidden && read -r -d '' type && read -r -d '' verbatim; do
    if [ "$type" == 'file' ]; then
      helm_set_opt='--set-file'
      value="$source/$path"
    else
      if [ -n "$path" ]; then
        value="$(< "$source/$path")"
      fi

      if [ "$verbatim" != 'false' ]; then
        value="${value/\\/\\\\}"
      fi
      helm_set_opt='--set'
      if [ "$type" == 'string' ]; then
        helm_set_opt='--set-string'
      fi
    fi
    scrubbed_value="$value"
    if [ "$hidden" != 'false' ]; then
      scrubbed_value='***HIDDEN***'
    fi

    overridden_args+=("$helm_set_opt" "$key=$value")
    scrubbed_overridden_args+=("$helm_set_opt" "$key=$scrubbed_value")
  done < <(jq -j '.params.override_values[]? | if has("key") and (has("value") or has("path")) then (.key, .value // "", .path // "", .hide // false, .type, .verbatim // false) else empty end | tostring + "\u0000"'  < $payload)
}

current_deployed() {
  local release="$1"
  # The rest LGTM but we need --max 20 to get the last DEPLOYED release and not end up with a rolled back release being the last one.
  $helm_bin history --max 20 $release --namespace $namespace | grep -i "DEPLOYED"
}

helm_upgrade() {
  if [ "$release" == "" ]; then
    upgrade_args=("install" $chart_full "--generate-name" "--namespace=$namespace")
  else
    upgrade_args=("upgrade" "$release" $chart_full "--install" "--namespace=$namespace")
  fi
  upgrade_diff_args=("upgrade" "$release" $chart_full "--install" "--namespace=$namespace")

  if [ -n "$values" ]; then
    for value in $values; do
      if [ "$skip_missing_values" == "true" ]; then
        if [ -f "$source/$value" ]; then
          upgrade_args+=("-f" "$source/"$value)
          upgrade_diff_args+=("-f" "$source/"$value)
        else
          echo "skipping missing values file $source/$value"
        fi
      else
        upgrade_args+=("-f" "$source/"$value)
        upgrade_diff_args+=("-f" "$source/"$value)
      fi
    done
  fi

  overridden_args=()
  scrubbed_overridden_args=()
  set_overridden_values

  if [ "$create_namespace" == "true" ]; then
    upgrade_args+=("--create-namespace")
  fi

  if [ "$wait_for_jobs" == "true" ]; then
    upgrade_args+=("--wait")
    upgrade_args+=("--wait-for-jobs")
  elif [ "$check_is_ready" == "true" ]; then
    upgrade_args+=("--wait")    
  fi

  if [ "$atomic" == "true" ]; then
    upgrade_args+=("--atomic")
  fi

  if [ "$debug" == "true" ]; then
    upgrade_args+=("--debug")
    upgrade_args+=("--dry-run")
  fi

  if [ -n "$version" ]; then
    if [ -f "$source/$version" ]; then
      version=$(cat $source/$version)
    fi
    upgrade_args+=("--version" "$version")
    upgrade_diff_args+=("--version" "$version")
  fi

  if [ "$cleanup_on_fail" == "true" ]; then
    upgrade_args+=("--cleanup-on-fail")
  fi

  if [ "$force" == "true" ]; then
    upgrade_args+=("--force")
  fi

  if [ -n "$post_renderer" ]; then
    upgrade_args+=("--post-renderer" "$chart_full/$post_renderer")
    upgrade_diff_args+=("--post-renderer" "$chart_full/$post_renderer")
  fi

  if [ "$reuse_values" == "true" ]; then
    upgrade_args+=("--reuse-values")
    upgrade_diff_args+=("--reuse-values")
  fi

  if [ "$reset_values" == "true" ]; then
    upgrade_args+=("--reset-values")
    upgrade_diff_args+=("--reset-values")
  fi

  if [ "$devel" == "true" ]; then
    upgrade_args+=("--devel")
    upgrade_diff_args+=("--devel")
  fi

  upgrade_args+=("--timeout=${timeout}")

  # Only if upgrade we can use history_max flag
  if [ -n "$release" ] && [ -n "$history_max" ]; then
    upgrade_args+=("--history-max=$history_max")
  fi

  logfile="/tmp/log"
  mkdir -p /tmp

  helm_args=("${upgrade_args[@]}" "${overridden_args[@]}")
  helm_echo_args=("${upgrade_args[@]}" "${scrubbed_overridden_args[@]}")
  helm_diff_args=("${upgrade_diff_args[@]}" "${overridden_args[@]}" "--suppress-secrets" "--include-tests" )

  if [[ -d "$chart_full" ]]; then
    helm_depup_args=("dependency" "update" "$chart_full")
    helm_depup_echo_args=("dependency" "update" "$chart_full")
    echo "Running command helm ${helm_depup_echo_args[@]}"
    $helm_bin "${helm_depup_args[@]}" | tee "$logfile"
  fi

  if [ "$show_diff" = true ] ; then
    echo "Release diff:"
    $helm_bin diff --no-color=false "${helm_diff_args[@]}" | tee "$logfile"
  fi

  echo "Running command helm ${helm_echo_args[@]} | tee $logfile"
  upgrade_result=$($helm_bin "${helm_args[@]}" | tee "$logfile")
  echo "$upgrade_result"

  deployed_release=$(echo $upgrade_result | head -n 1 | awk '{ print $2 }')

  if [ -n "$wait" ] && [ "$wait" -gt "0" ]; then
    echo "Waiting for $wait Seconds"
    sleep $wait
  fi
}

helm_uninstall() {
  if [ -z "$release" ]; then
    echo "invalid payload (missing release if uninstall=true)"
    exit 1
  fi

  echo "Uninstalling the release $release..."
  uninstall_args=("uninstall")
  if [ "$debug" = true ]; then
    uninstall_args+=("--dry-run" "--debug")
  fi

  uninstall_args+=("$release" "--namespace=$namespace")
  logfile="/tmp/log"
  mkdir -p /tmp

  echo "Running command helm ${uninstall_args[@]} | tee $logfile"
  $helm_bin "${uninstall_args[@]}" | tee $logfile
}

helm_test() {
  if [ -z "$release" ]; then
    echo "invalid payload (missing release if test=true)"
    exit 1
  fi
  
  if [ "$debug" = true ]; then
    test_args+=("--debug")
  fi
  
  test_args+=("--namespace=$namespace" "test" "$release" "--timeout=$timeout")
 
  if [ "$test_logs" = true ] ; then
    test_args+=("--logs")
  fi

  logfile="/tmp/log"
  mkdir -p /tmp

  echo "Running command helm ${test_args[@]} | tee $logfile"
  $helm_bin ${test_args[@]} | tee $logfile
}

# support private registry
if [ "${private_registry}" = true ]; then
  echo "private registry configured. proceeding with helm registry login"
  helm_registry_login
fi

if [ "$uninstall" = true ]; then
  helm_uninstall

  if [ "$delete_namespace" = true ] && [ -n "$namespace" ] && [ $debug = false ]; then
    echo "Deleting the namespace $namespace..."
    logfile="/tmp/log"
    kubectl delete namespaces "$namespace" | tee "$logfile"
  fi

  result="$(jq -n "{version:{release:\"$release\", uninstalled: \"true\"}, metadata: [{name: \"release\", value: \"$release\"}]}")"
  echo "$result" | jq -s add  >&3
elif [ "$test" = true ]; then
  helm_test
  result="$(jq -n "{version:{release:\"$release\", tested: \"true\"}, metadata: [{name: \"release\", value: \"$release\"}]}")"
  echo "$result" | jq -s add  >&3
elif [ "$replace" = true ]; then
  helm_uninstall
  helm_upgrade
  result="$(jq -n "{version:{release:\"$release\", tested: \"true\"}, metadata: [{name: \"release\", value: \"$release\"}]}")"
  echo "$result" | jq -s add  >&3
else
  echo "Installing $release"
  helm_upgrade

  if [ "$debug" != "true" ]; then
    # If release is empty
    if [ -z "$release" ]; then
      release=$deployed_release
    fi
    deployed=$(current_deployed "$release")
    revision=$(echo $deployed | awk '{ print $1 }')
    chart=$(echo $deployed | awk '{ print $8 }')
    echo "Deployed revision $revision of $release"
    result="$(jq -n "{version:{release:\"$release\", revision:\"$revision\"}, metadata: [{name: \"release\", value: \"$release\"},{name: \"revision\", value: \"$revision\"},{name: \"chart\", value: \"$chart\"}]}")"
    echo "$result" | jq -s add  >&3
  else
    echo "Debug was set to ${debug}; no release was performed. | tee $logfile"
    echo '{"version": {"revision": "N/A", "release": "N/A"}}' >&3
  fi
fi
