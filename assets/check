#!/bin/bash

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source /opt/resource/common.sh

# Read inputs
payload=$(mktemp $TMPDIR/helm-resource-request.XXXXXX)
cat > $payload <&0

# Prepare
setup_resource $payload

# Parse parameters
namespace=$(jq -r '.source.namespace // "default"' < $payload)
release=$(jq -r '.source.release // ""' < $payload)
release_overwrite=$(jq -r '.params.release // ""' < $payload)
current_release=$(jq -r '.version.release' < $payload || true)

logfile="/tmp/log"
mkdir -p /tmp

echo "$release ----- $release_overwrite ------ $current_release" | tee "$logfile" 

if [ -f "$source/$release_overwrite" ]; then
  release=$(cat $source/$release_overwrite)
elif [ -n "$release_overwrite" ]; then
  release=$release_overwrite
fi

echo "after first if: $release " | tee -a "$logfile"

if [ -z "$release" ]; then
  release="$current_release"
fi

echo "after second if: $release " | tee -a "$logfile"

if [ "$release" ] ; then
  echo "$release was true" | tee "$logfile"
  revision=$($helm_bin status --namespace $namespace $release -o json 2>/dev/null | jq '.version')
  echo "revision: $revision" | tee -a "$logfile"
  if [ $? -ne 0 ] ; then
    echo "helm status failed" | tee -a "$logfile"
    revision=0
  fi
  echo $revision | jq -R '.' | jq -s "map({\"revision\": ., \"release\": \"$release\"})" >&3
  exit 0
fi

echo "everything else failed" | tee -a "$logfile"
exit 1
